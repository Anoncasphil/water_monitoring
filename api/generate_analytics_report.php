<?php
// Enable error reporting for debugging
error_reporting(E_ALL);
ini_set('display_errors', 1);

session_start();

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    http_response_code(401);
    echo json_encode(['error' => 'Unauthorized']);
    exit;
}

try {
    require_once '../config/database.php';
    require_once '../vendor/autoload.php';
} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => 'Configuration error: ' . $e->getMessage()]);
    exit;
}

// Use TCPDF for PDF generation

try {
    $db = Database::getInstance();
    $conn = $db->getConnection();
    
    // Get user information
    $userQuery = "SELECT first_name, last_name, email FROM users WHERE id = ?";
    $userStmt = $conn->prepare($userQuery);
    $userStmt->bind_param("i", $_SESSION['user_id']);
    $userStmt->execute();
    $userResult = $userStmt->get_result();
    $user = $userResult->fetch_assoc();
    
    if (!$user) {
        throw new Exception('User not found');
    }
    
    // Get comprehensive data
    $timeRange = $_GET['range'] ?? '30d';
    $days = 30;
    switch ($timeRange) {
        case '24h': $days = 1; break;
        case '7d': $days = 7; break;
        case '30d': $days = 30; break;
        case '90d': $days = 90; break;
    }
    
    // Get latest readings
    $latestQuery = "SELECT * FROM water_readings ORDER BY reading_time DESC LIMIT 1";
    $latestResult = $conn->query($latestQuery);
    $latest = $latestResult->fetch_assoc();
    
    if (!$latest) {
        throw new Exception('No water quality data found in the database');
    }
    
    // Get statistics
    $statsQuery = "SELECT 
        COUNT(*) as total_readings,
        AVG(turbidity) as avg_turbidity,
        AVG(tds) as avg_tds,
        AVG(ph) as avg_ph,
        AVG(temperature) as avg_temperature,
        MIN(turbidity) as min_turbidity,
        MAX(turbidity) as max_turbidity,
        MIN(tds) as min_tds,
        MAX(tds) as max_tds,
        MIN(ph) as min_ph,
        MAX(ph) as max_ph,
        MIN(temperature) as min_temp,
        MAX(temperature) as max_temp
        FROM water_readings WHERE reading_time >= DATE_SUB(NOW(), INTERVAL ? DAY)";
    $statsStmt = $conn->prepare($statsQuery);
    $statsStmt->bind_param("i", $days);
    $statsStmt->execute();
    $statsResult = $statsStmt->get_result();
    $stats = $statsResult->fetch_assoc();
    
    // Get hourly data for trends
    $hourlyQuery = "SELECT reading_time, turbidity, tds, ph, temperature 
                   FROM water_readings 
                   WHERE reading_time >= DATE_SUB(NOW(), INTERVAL ? DAY) 
                   ORDER BY reading_time";
    $hourlyStmt = $conn->prepare($hourlyQuery);
    $hourlyStmt->bind_param("i", $days);
    $hourlyStmt->execute();
    $hourlyResult = $hourlyStmt->get_result();
    $hourlyData = $hourlyResult->fetch_all(MYSQLI_ASSOC);
    
    // Get daily averages
    $dailyQuery = "SELECT DATE(reading_time) as date, 
                   AVG(turbidity) as avg_turbidity, 
                   AVG(tds) as avg_tds, 
                   AVG(ph) as avg_ph, 
                   AVG(temperature) as avg_temperature, 
                   COUNT(*) as readings 
                   FROM water_readings 
                   WHERE reading_time >= DATE_SUB(NOW(), INTERVAL ? DAY) 
                   GROUP BY DATE(reading_time) 
                   ORDER BY date";
    $dailyStmt = $conn->prepare($dailyQuery);
    $dailyStmt->bind_param("i", $days);
    $dailyStmt->execute();
    $dailyResult = $dailyStmt->get_result();
    $dailyData = $dailyResult->fetch_all(MYSQLI_ASSOC);
    
    // Generate comprehensive PDF report
    $exportTime = date('Y-m-d H:i:s');
    $fileName = "water_quality_report_" . date('Y-m-d_H-i-s') . ".pdf";
    
    // Generate PDF report using TCPDF
    generatePDFReport($user, $stats, $hourlyData, $dailyData, $latest, $timeRange, $exportTime, $fileName);
    
} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}

function generatePDFReport($user, $stats, $hourlyData, $dailyData, $latest, $timeRange, $exportTime, $fileName) {
    $userName = $user['first_name'] . ' ' . $user['last_name'];
    $userEmail = $user['email'];
    
    // Create new PDF document
    $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
    
    // Set document information
    $pdf->SetCreator('Water Quality Monitoring System');
    $pdf->SetAuthor($userName);
    $pdf->SetTitle('Water Quality Analytics Report');
    $pdf->SetSubject('Water Quality Data Analysis');
    $pdf->SetKeywords('Water Quality, Analytics, Report, Monitoring');
    
    // Set default header data
    $pdf->SetHeaderData('', 0, 'Water Quality Analytics Report', 'Generated by: ' . $userName . ' on ' . $exportTime);
    
    // Set header and footer fonts
    $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
    $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));
    
    // Set default monospaced font
    $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
    
    // Set margins
    $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
    $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
    $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
    
    // Set auto page breaks
    $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);
    
    // Set image scale factor
    $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
    
    // Set font
    $pdf->SetFont('helvetica', '', 10);
    
    // Add a page
    $pdf->AddPage();
    
    // Conversion functions
    function convertTurbidityToPercentage($rawValue) {
        return max(0, min(100, (($rawValue - 1) / 2999) * 100));
    }
    
    function convertTDSToPercentage($ppmValue) {
        return max(0, min(100, ($ppmValue / 1000) * 100));
    }
    
    // Quality assessment functions
    function getTurbidityQuality($ntu) {
        if ($ntu <= 2) return 'Good';
        if ($ntu <= 5) return 'Medium';
        return 'Critical';
    }
    
    function getPHQuality($ph) {
        if ($ph >= 6 && $ph <= 8) return 'Good';
        if (($ph >= 4 && $ph < 6) || ($ph > 8 && $ph <= 10)) return 'Medium';
        return 'Critical';
    }
    
    function getTemperatureQuality($temp) {
        if ($temp >= 20 && $temp < 30) return 'Good';
        if ($temp >= 0 && $temp < 20) return 'Cold';
        if ($temp >= 30 && $temp <= 40) return 'Warm';
        return 'Unknown';
    }
    
    // Title
    $pdf->SetFont('helvetica', 'B', 16);
    $pdf->Cell(0, 10, 'Water Quality Analytics Report', 0, 1, 'C');
    $pdf->SetFont('helvetica', '', 12);
    $pdf->Cell(0, 8, 'Comprehensive Data Analysis and Summary', 0, 1, 'C');
    $pdf->Ln(10);
    
    // Report Information
    $pdf->SetFont('helvetica', 'B', 12);
    $pdf->Cell(0, 8, 'Report Information', 0, 1, 'L');
    $pdf->SetFont('helvetica', '', 10);
    $pdf->Cell(0, 5, 'Generated By: ' . $userName . ' (' . $userEmail . ')', 0, 1, 'L');
    $pdf->Cell(0, 5, 'Export Time: ' . $exportTime, 0, 1, 'L');
    $pdf->Cell(0, 5, 'Time Period: Last ' . $timeRange, 0, 1, 'L');
    $pdf->Cell(0, 5, 'Report ID: WQR-' . date('Ymd-His'), 0, 1, 'L');
    $pdf->Ln(10);
    
    // Executive Summary
    $pdf->SetFont('helvetica', 'B', 12);
    $pdf->Cell(0, 8, 'Executive Summary', 0, 1, 'L');
    $pdf->SetFont('helvetica', '', 10);
    
    $latestTurbidityQuality = getTurbidityQuality($latest['turbidity']);
    $latestPHQuality = getPHQuality($latest['ph']);
    $latestTempQuality = getTemperatureQuality($latest['temperature']);
    
    $summary = "Latest Water Quality Status:\n";
    $summary .= "• Turbidity: " . number_format($latest['turbidity'], 1) . " NTU (" . number_format(convertTurbidityToPercentage($latest['turbidity']), 1) . "%) - " . $latestTurbidityQuality . "\n";
    $summary .= "• TDS: " . number_format($latest['tds'], 0) . " ppm (" . number_format(convertTDSToPercentage($latest['tds']), 1) . "%)\n";
    $summary .= "• pH: " . number_format($latest['ph'], 2) . " - " . $latestPHQuality . "\n";
    $summary .= "• Temperature: " . number_format($latest['temperature'], 1) . "°C - " . $latestTempQuality . "\n";
    
    $pdf->MultiCell(0, 5, $summary, 0, 'L', false, 1);
    $pdf->Ln(10);
    
    // Key Performance Metrics
    $pdf->SetFont('helvetica', 'B', 12);
    $pdf->Cell(0, 8, 'Key Performance Metrics', 0, 1, 'L');
    $pdf->SetFont('helvetica', '', 10);
    
    $metrics = "• Total Readings: " . number_format($stats['total_readings']) . "\n";
    $metrics .= "• Average Turbidity: " . number_format($stats['avg_turbidity'], 2) . " NTU\n";
    $metrics .= "• Average TDS: " . number_format($stats['avg_tds'], 0) . " ppm\n";
    $metrics .= "• Average pH: " . number_format($stats['avg_ph'], 2) . "\n";
    $metrics .= "• Average Temperature: " . number_format($stats['avg_temperature'], 1) . "°C\n";
    
    $pdf->MultiCell(0, 5, $metrics, 0, 'L', false, 1);
    $pdf->Ln(10);
    
    // Parameter Ranges Table
    $pdf->SetFont('helvetica', 'B', 12);
    $pdf->Cell(0, 8, 'Parameter Ranges', 0, 1, 'L');
    
    // Table header
    $pdf->SetFont('helvetica', 'B', 9);
    $pdf->Cell(35, 8, 'Parameter', 1, 0, 'C');
    $pdf->Cell(25, 8, 'Minimum', 1, 0, 'C');
    $pdf->Cell(25, 8, 'Maximum', 1, 0, 'C');
    $pdf->Cell(25, 8, 'Range', 1, 0, 'C');
    $pdf->Cell(30, 8, 'Std Dev (±)', 1, 1, 'C');
    
    // Table data
    $pdf->SetFont('helvetica', '', 8);
    
    // Turbidity row
    $pdf->Cell(35, 6, 'Turbidity (NTU)', 1, 0, 'L');
    $pdf->Cell(25, 6, number_format($stats['min_turbidity'], 2), 1, 0, 'C');
    $pdf->Cell(25, 6, number_format($stats['max_turbidity'], 2), 1, 0, 'C');
    $pdf->Cell(25, 6, number_format($stats['max_turbidity'] - $stats['min_turbidity'], 2), 1, 0, 'C');
    $pdf->Cell(30, 6, number_format(($stats['max_turbidity'] - $stats['min_turbidity']) / 2, 2), 1, 1, 'C');
    
    // TDS row
    $pdf->Cell(35, 6, 'TDS (ppm)', 1, 0, 'L');
    $pdf->Cell(25, 6, number_format($stats['min_tds'], 0), 1, 0, 'C');
    $pdf->Cell(25, 6, number_format($stats['max_tds'], 0), 1, 0, 'C');
    $pdf->Cell(25, 6, number_format($stats['max_tds'] - $stats['min_tds'], 0), 1, 0, 'C');
    $pdf->Cell(30, 6, number_format(($stats['max_tds'] - $stats['min_tds']) / 2, 0), 1, 1, 'C');
    
    // pH row
    $pdf->Cell(35, 6, 'pH', 1, 0, 'L');
    $pdf->Cell(25, 6, number_format($stats['min_ph'], 2), 1, 0, 'C');
    $pdf->Cell(25, 6, number_format($stats['max_ph'], 2), 1, 0, 'C');
    $pdf->Cell(25, 6, number_format($stats['max_ph'] - $stats['min_ph'], 2), 1, 0, 'C');
    $pdf->Cell(30, 6, number_format(($stats['max_ph'] - $stats['min_ph']) / 2, 2), 1, 1, 'C');
    
    // Temperature row
    $pdf->Cell(35, 6, 'Temperature (°C)', 1, 0, 'L');
    $pdf->Cell(25, 6, number_format($stats['min_temp'], 1), 1, 0, 'C');
    $pdf->Cell(25, 6, number_format($stats['max_temp'], 1), 1, 0, 'C');
    $pdf->Cell(25, 6, number_format($stats['max_temp'] - $stats['min_temp'], 1), 1, 0, 'C');
    $pdf->Cell(30, 6, number_format(($stats['max_temp'] - $stats['min_temp']) / 2, 1), 1, 1, 'C');
    
    $pdf->Ln(10);
    
    // Recent Measurements Table
    $pdf->SetFont('helvetica', 'B', 12);
    $pdf->Cell(0, 8, 'Recent Measurements (Last 10 Readings)', 0, 1, 'L');
    
    // Table header
    $pdf->SetFont('helvetica', 'B', 8);
    $pdf->Cell(30, 6, 'Time', 1, 0, 'C');
    $pdf->Cell(25, 6, 'Turbidity', 1, 0, 'C');
    $pdf->Cell(25, 6, 'TDS', 1, 0, 'C');
    $pdf->Cell(20, 6, 'pH', 1, 0, 'C');
    $pdf->Cell(25, 6, 'Temperature', 1, 1, 'C');
    
    // Table data
    $pdf->SetFont('helvetica', '', 7);
    $recentReadings = array_slice($hourlyData, -10);
    foreach ($recentReadings as $reading) {
        $turbidityPercent = convertTurbidityToPercentage($reading['turbidity']);
        $tdsPercent = convertTDSToPercentage($reading['tds']);
        
        $pdf->Cell(30, 5, date('M j, H:i', strtotime($reading['reading_time'])), 1, 0, 'C');
        $pdf->Cell(25, 5, number_format($reading['turbidity'], 1) . ' NTU', 1, 0, 'C');
        $pdf->Cell(25, 5, number_format($reading['tds'], 0) . ' ppm', 1, 0, 'C');
        $pdf->Cell(20, 5, number_format($reading['ph'], 2), 1, 0, 'C');
        $pdf->Cell(25, 5, number_format($reading['temperature'], 1) . '°C', 1, 1, 'C');
    }
    
    $pdf->Ln(10);
    
    // Quality Assessment Guidelines
    $pdf->SetFont('helvetica', 'B', 12);
    $pdf->Cell(0, 8, 'Quality Assessment Guidelines', 0, 1, 'L');
    $pdf->SetFont('helvetica', '', 9);
    
    $guidelines = "Turbidity Standards:\n";
    $guidelines .= "• Good: ≤ 2 NTU (Clear water)\n";
    $guidelines .= "• Medium: 2-5 NTU (Slightly cloudy)\n";
    $guidelines .= "• Critical: > 5 NTU (Very cloudy)\n\n";
    
    $guidelines .= "pH Standards:\n";
    $guidelines .= "• Good: 6.0-8.0 (Optimal range)\n";
    $guidelines .= "• Medium: 4.0-6.0 & 8.0-10.0 (Acceptable)\n";
    $guidelines .= "• Critical: < 4.0 or > 10.0 (Requires attention)\n\n";
    
    $guidelines .= "Temperature Standards:\n";
    $guidelines .= "• Good: 20-30°C (Optimal temperature)\n";
    $guidelines .= "• Cold: 0-20°C (Cool water)\n";
    $guidelines .= "• Warm: 30-40°C (Warm water)\n";
    
    $pdf->MultiCell(0, 4, $guidelines, 0, 'L', false, 1);
    
    // Footer
    $pdf->Ln(15);
    $pdf->SetFont('helvetica', 'I', 8);
    $pdf->Cell(0, 5, 'This report was automatically generated by the Water Quality Monitoring System', 0, 1, 'C');
    $pdf->Cell(0, 5, 'Generated on ' . $exportTime . ' by ' . $userName, 0, 1, 'C');
    $pdf->Cell(0, 5, 'For technical support, please contact the system administrator.', 0, 1, 'C');
    
    // Set headers for PDF download
    header('Content-Type: application/pdf');
    header('Content-Disposition: attachment; filename="' . $fileName . '"');
    header('Cache-Control: private, max-age=0, must-revalidate');
    header('Pragma: public');
    
    // Output PDF
    $pdf->Output($fileName, 'D');
}
?>